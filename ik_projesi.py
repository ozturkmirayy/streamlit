{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f5e7d4cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-09-01 12:52:08.923 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\Lenovo\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2024-09-01 12:52:08.927 Session state does not function when running a script without `streamlit run`\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import streamlit as st\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "import pickle\n",
    "\n",
    "def train_model():\n",
    "    try:\n",
    "        # Veriyi okuma\n",
    "        data = pd.read_csv('recruitment_data.csv')\n",
    "        \n",
    "        # Eksik değerleri kontrol etme ve doldurma\n",
    "        if data.isnull().sum().sum() > 0:\n",
    "            data = data.fillna(0)\n",
    "        \n",
    "        print(\"Veri sütunları:\", data.columns)\n",
    "\n",
    "        # Özellikler ve hedef değişkeni ayırma\n",
    "        X = data.drop('HiringDecision', axis=1)\n",
    "        y = data['HiringDecision']\n",
    "        \n",
    "        # Veriyi eğitim ve test setlerine ayırma\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "        \n",
    "        # Modeli eğitme\n",
    "        model = RandomForestClassifier()\n",
    "        model.fit(X_train, y_train)\n",
    "        \n",
    "        # Tahmin ve doğruluk\n",
    "        predictions = model.predict(X_test)\n",
    "        accuracy = accuracy_score(y_test, predictions)\n",
    "        print(f\"Model Doğruluğu: {accuracy:.2f}\")\n",
    "        \n",
    "        # Modeli kaydetme\n",
    "        with open('model.pkl', 'wb') as file:\n",
    "            pickle.dump(model, file)\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Model eğitimi sırasında bir hata oluştu: {e}\")\n",
    "\n",
    "# train_model()  # Bu satırı yorum satırına alın, yalnızca model eğitimine ihtiyacınız olduğunda çalıştırın.\n",
    "\n",
    "st.title(\"İşe Alınma Tahmin Uygulaması\")\n",
    "\n",
    "def get_user_input():\n",
    "    try:\n",
    "        # Kullanıcı girdileri\n",
    "        age = st.number_input('Yaş', min_value=18, max_value=65, value=30)\n",
    "        education = st.selectbox('Eğitim Seviyesi', ['Önlisans', 'Lisans', 'Yüksek Lisans', 'Doktora'])\n",
    "        experience = st.slider('Deneyim (Yıl)', 0, 40, 5)\n",
    "        distance = st.slider('Şirketten Uzaklık (km)', 0, 100, 10)\n",
    "        gender = st.selectbox('Cinsiyet', ['Erkek', 'Kadın'])\n",
    "\n",
    "        # Haritalamalar\n",
    "        education_mapping = {'Önlisans': 1, 'Lisans': 2, 'Yüksek Lisans': 3, 'Doktora': 4}\n",
    "        gender_mapping = {'Erkek': 0, 'Kadın': 1}\n",
    "\n",
    "        education_num = education_mapping[education]\n",
    "        gender_num = gender_mapping[gender]\n",
    "\n",
    "        user_data = {\n",
    "            'Age': age, \n",
    "            'EducationLevel': education_num, \n",
    "            'ExperienceYears': experience,\n",
    "            'DistanceFromCompany': distance,\n",
    "            'Gender': gender_num\n",
    "        }\n",
    "        \n",
    "        features = pd.DataFrame(user_data, index=[0])\n",
    "        return features\n",
    "    \n",
    "    except Exception as e:\n",
    "        st.error(f\"Girdi işlemleri sırasında bir hata oluştu: {e}\")\n",
    "        return pd.DataFrame()  # Boş bir DataFrame döner\n",
    "\n",
    "user_input = get_user_input()\n",
    "\n",
    "try:\n",
    "    # Eğitilmiş modeli yükleme\n",
    "    with open('model.pkl', 'rb') as file:\n",
    "        loaded_model = pickle.load(file)\n",
    "    \n",
    "    # Girdileri modelin beklediği özelliklerle hizalama\n",
    "    columns_needed = loaded_model.feature_names_in_\n",
    "    user_input = user_input.reindex(columns=columns_needed, fill_value=0)\n",
    "    \n",
    "    # Tahmin yapma\n",
    "    prediction = loaded_model.predict(user_input)\n",
    "    \n",
    "    # Tahmin sonucunu gösterme\n",
    "    st.subheader('Tahmin Sonucu')\n",
    "    st.write('İşe Alınma Durumu: {}'.format('Alınacak' if prediction[0] == 1 else 'Alınmayacak'))\n",
    "\n",
    "except FileNotFoundError:\n",
    "    st.error(\"Model dosyası bulunamadı, lütfen modeli eğitip tekrar deneyin.\")\n",
    "except NameError as ne:\n",
    "    st.error(f\"Bir NameError oluştu: {ne}\")\n",
    "except Exception as e:\n",
    "    st.error(f\"Tahmin işlemi sırasında bir hata oluştu: {e}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e8d08cb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
